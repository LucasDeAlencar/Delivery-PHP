/**\n * Sistema de Carrinho de Compras\n * Funcionalidades para gerenciar o carrinho de produtos\n */\n\nclass CarrinhoManager {\n    constructor() {\n        this.carrinho = this.carregarCarrinho();\n        this.inicializar();\n    }\n    \n    inicializar() {\n        this.atualizarContadorCarrinho();\n        this.criarIconeCarrinho();\n    }\n    \n    // Carregar carrinho do localStorage\n    carregarCarrinho() {\n        try {\n            return JSON.parse(localStorage.getItem('carrinho') || '[]');\n        } catch (error) {\n            console.error('Erro ao carregar carrinho:', error);\n            return [];\n        }\n    }\n    \n    // Salvar carrinho no localStorage\n    salvarCarrinho() {\n        try {\n            localStorage.setItem('carrinho', JSON.stringify(this.carrinho));\n            this.atualizarContadorCarrinho();\n        } catch (error) {\n            console.error('Erro ao salvar carrinho:', error);\n        }\n    }\n    \n    // Adicionar produto ao carrinho\n    adicionarProduto(produto) {\n        // Verificar se o produto já existe no carrinho\n        const produtoExistente = this.carrinho.find(item => \n            item.produto.id === produto.produto.id\n        );\n        \n        if (produtoExistente) {\n            // Se existe, aumentar a quantidade\n            produtoExistente.quantidade += produto.quantidade;\n            produtoExistente.total = produtoExistente.quantidade * produtoExistente.precoUnitario;\n        } else {\n            // Se não existe, adicionar novo\n            this.carrinho.push(produto);\n        }\n        \n        this.salvarCarrinho();\n        return true;\n    }\n    \n    // Remover produto do carrinho\n    removerProduto(produtoId) {\n        this.carrinho = this.carrinho.filter(item => item.produto.id !== produtoId);\n        this.salvarCarrinho();\n    }\n    \n    // Atualizar quantidade de um produto\n    atualizarQuantidade(produtoId, novaQuantidade) {\n        const produto = this.carrinho.find(item => item.produto.id === produtoId);\n        if (produto && novaQuantidade > 0) {\n            produto.quantidade = novaQuantidade;\n            produto.total = produto.quantidade * produto.precoUnitario;\n            this.salvarCarrinho();\n        }\n    }\n    \n    // Limpar carrinho\n    limparCarrinho() {\n        this.carrinho = [];\n        this.salvarCarrinho();\n    }\n    \n    // Obter total do carrinho\n    obterTotal() {\n        return this.carrinho.reduce((total, item) => total + item.total, 0);\n    }\n    \n    // Obter quantidade total de itens\n    obterQuantidadeTotal() {\n        return this.carrinho.reduce((total, item) => total + item.quantidade, 0);\n    }\n    \n    // Atualizar contador visual do carrinho\n    atualizarContadorCarrinho() {\n        const quantidade = this.obterQuantidadeTotal();\n        const contador = $('.carrinho-contador');\n        \n        if (contador.length > 0) {\n            contador.text(quantidade);\n            if (quantidade > 0) {\n                contador.show().addClass('animate__animated animate__pulse');\n                setTimeout(() => contador.removeClass('animate__animated animate__pulse'), 1000);\n            } else {\n                contador.hide();\n            }\n        }\n    }\n    \n    // Criar ícone do carrinho na navbar\n    criarIconeCarrinho() {\n        const navbar = $('.navbar-nav');\n        if (navbar.length > 0 && $('.carrinho-item').length === 0) {\n            const iconeCarrinho = $(`\n                <li class=\"nav-item carrinho-item\">\n                    <a href=\"#\" class=\"nav-link carrinho-link\" data-toggle=\"modal\" data-target=\"#modalCarrinho\">\n                        <i class=\"flaticon-pizza-1\"></i>\n                        Carrinho\n                        <span class=\"carrinho-contador badge badge-warning ml-1\" style=\"display: none;\">0</span>\n                    </a>\n                </li>\n            `);\n            \n            navbar.append(iconeCarrinho);\n            this.criarModalCarrinho();\n        }\n    }\n    \n    // Criar modal do carrinho\n    criarModalCarrinho() {\n        if ($('#modalCarrinho').length === 0) {\n            const modalCarrinho = $(`\n                <div class=\"modal fade\" id=\"modalCarrinho\" tabindex=\"-1\" role=\"dialog\">\n                    <div class=\"modal-dialog modal-lg\" role=\"document\">\n                        <div class=\"modal-content\">\n                            <div class=\"modal-header bg-warning text-white\">\n                                <h5 class=\"modal-title\">\n                                    <i class=\"flaticon-pizza-1 mr-2\"></i>Meu Carrinho\n                                </h5>\n                                <button type=\"button\" class=\"close text-white\" data-dismiss=\"modal\">\n                                    <span>&times;</span>\n                                </button>\n                            </div>\n                            <div class=\"modal-body\" id=\"carrinho-conteudo\">\n                                <!-- Conteúdo será preenchido dinamicamente -->\n                            </div>\n                            <div class=\"modal-footer\">\n                                <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Fechar</button>\n                                <button type=\"button\" class=\"btn btn-danger\" id=\"btn-limpar-carrinho\">Limpar Carrinho</button>\n                                <button type=\"button\" class=\"btn btn-success\" id=\"btn-finalizar-pedido\">Finalizar Pedido</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            `);\n            \n            $('body').append(modalCarrinho);\n            this.configurarEventosCarrinho();\n        }\n    }\n    \n    // Configurar eventos do modal do carrinho\n    configurarEventosCarrinho() {\n        // Atualizar conteúdo quando modal for aberto\n        $('#modalCarrinho').on('show.bs.modal', () => {\n            this.atualizarModalCarrinho();\n        });\n        \n        // Limpar carrinho\n        $('#btn-limpar-carrinho').click(() => {\n            if (confirm('Tem certeza que deseja limpar o carrinho?')) {\n                this.limparCarrinho();\n                this.atualizarModalCarrinho();\n                this.mostrarNotificacao('Carrinho Limpo!', 'Todos os itens foram removidos.', 'info');\n            }\n        });\n        \n        // Finalizar pedido\n        $('#btn-finalizar-pedido').click(() => {\n            this.finalizarPedido();\n        });\n    }\n    \n    // Atualizar conteúdo do modal do carrinho\n    atualizarModalCarrinho() {\n        const conteudo = $('#carrinho-conteudo');\n        \n        if (this.carrinho.length === 0) {\n            conteudo.html(`\n                <div class=\"text-center py-5\">\n                    <i class=\"flaticon-pizza-1\" style=\"font-size: 4rem; color: #ccc;\"></i>\n                    <h4 class=\"mt-3 text-muted\">Carrinho Vazio</h4>\n                    <p class=\"text-muted\">Adicione alguns produtos deliciosos!</p>\n                </div>\n            `);\n            $('#btn-finalizar-pedido').prop('disabled', true);\n            return;\n        }\n        \n        let html = '<div class=\"carrinho-itens\">';\n        \n        this.carrinho.forEach((item, index) => {\n            html += `\n                <div class=\"carrinho-item-row border-bottom py-3\" data-produto-id=\"${item.produto.id}\">\n                    <div class=\"row align-items-center\">\n                        <div class=\"col-md-2\">\n                            ${item.produto.imagem ? \n                                `<img src=\"${item.produto.imagem}\" class=\"img-fluid rounded\" style=\"max-height: 60px;\">` :\n                                `<div class=\"bg-light rounded d-flex align-items-center justify-content-center\" style=\"height: 60px; width: 60px;\"><i class=\"flaticon-pizza-1 text-muted\"></i></div>`\n                            }\n                        </div>\n                        <div class=\"col-md-4\">\n                            <h6 class=\"mb-1\">${item.produto.nome}</h6>\n                            <small class=\"text-muted\">${item.produto.categoria}</small>\n                        </div>\n                        <div class=\"col-md-2\">\n                            <div class=\"input-group input-group-sm\">\n                                <div class=\"input-group-prepend\">\n                                    <button class=\"btn btn-outline-secondary btn-diminuir-carrinho\" data-produto-id=\"${item.produto.id}\">-</button>\n                                </div>\n                                <input type=\"number\" class=\"form-control text-center\" value=\"${item.quantidade}\" min=\"1\" readonly>\n                                <div class=\"input-group-append\">\n                                    <button class=\"btn btn-outline-secondary btn-aumentar-carrinho\" data-produto-id=\"${item.produto.id}\">+</button>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-md-2 text-center\">\n                            <strong>R$ ${item.total.toFixed(2).replace('.', ',')}</strong>\n                        </div>\n                        <div class=\"col-md-2 text-center\">\n                            <button class=\"btn btn-sm btn-outline-danger btn-remover-carrinho\" data-produto-id=\"${item.produto.id}\">\n                                <i class=\"fa fa-trash\"></i>\n                            </button>\n                        </div>\n                    </div>\n                    ${item.observacoes ? `<div class=\"row mt-2\"><div class=\"col-12\"><small class=\"text-muted\"><strong>Obs:</strong> ${item.observacoes}</small></div></div>` : ''}\n                </div>\n            `;\n        });\n        \n        html += `\n            </div>\n            <div class=\"carrinho-total mt-4 p-3 bg-light rounded\">\n                <div class=\"row\">\n                    <div class=\"col-md-6\">\n                        <strong>Total de Itens: ${this.obterQuantidadeTotal()}</strong>\n                    </div>\n                    <div class=\"col-md-6 text-right\">\n                        <h4 class=\"text-success mb-0\">Total: R$ ${this.obterTotal().toFixed(2).replace('.', ',')}</h4>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        conteudo.html(html);\n        $('#btn-finalizar-pedido').prop('disabled', false);\n        \n        // Configurar eventos dos botões\n        this.configurarBotoesCarrinho();\n    }\n    \n    // Configurar eventos dos botões do carrinho\n    configurarBotoesCarrinho() {\n        // Aumentar quantidade\n        $('.btn-aumentar-carrinho').click((e) => {\n            const produtoId = $(e.target).data('produto-id');\n            const produto = this.carrinho.find(item => item.produto.id === produtoId);\n            if (produto) {\n                this.atualizarQuantidade(produtoId, produto.quantidade + 1);\n                this.atualizarModalCarrinho();\n            }\n        });\n        \n        // Diminuir quantidade\n        $('.btn-diminuir-carrinho').click((e) => {\n            const produtoId = $(e.target).data('produto-id');\n            const produto = this.carrinho.find(item => item.produto.id === produtoId);\n            if (produto && produto.quantidade > 1) {\n                this.atualizarQuantidade(produtoId, produto.quantidade - 1);\n                this.atualizarModalCarrinho();\n            }\n        });\n        \n        // Remover produto\n        $('.btn-remover-carrinho').click((e) => {\n            const produtoId = $(e.target).data('produto-id');\n            if (confirm('Remover este item do carrinho?')) {\n                this.removerProduto(produtoId);\n                this.atualizarModalCarrinho();\n                this.mostrarNotificacao('Item Removido!', 'Produto removido do carrinho.', 'info');\n            }\n        });\n    }\n    \n    // Finalizar pedido\n    finalizarPedido() {\n        if (this.carrinho.length === 0) {\n            this.mostrarNotificacao('Carrinho Vazio!', 'Adicione produtos antes de finalizar.', 'error');\n            return;\n        }\n        \n        // Aqui você pode implementar a lógica de finalização\n        // Por exemplo: redirecionar para página de checkout, enviar para servidor, etc.\n        \n        const pedidoFinal = {\n            itens: this.carrinho,\n            total: this.obterTotal(),\n            quantidade: this.obterQuantidadeTotal(),\n            timestamp: new Date().toISOString()\n        };\n        \n        console.log('Pedido Final:', pedidoFinal);\n        \n        // Simular processamento\n        $('#btn-finalizar-pedido').text('Processando...').prop('disabled', true);\n        \n        setTimeout(() => {\n            this.mostrarNotificacao(\n                'Pedido Enviado!', \n                `Seu pedido de R$ ${this.obterTotal().toFixed(2).replace('.', ',')} foi enviado com sucesso!`\n            );\n            \n            // Limpar carrinho após finalizar\n            this.limparCarrinho();\n            $('#modalCarrinho').modal('hide');\n            $('#btn-finalizar-pedido').text('Finalizar Pedido').prop('disabled', false);\n        }, 2000);\n    }\n    \n    // Mostrar notificação\n    mostrarNotificacao(titulo, mensagem, tipo = 'success') {\n        const icones = {\n            success: '✅',\n            error: '❌',\n            info: 'ℹ️',\n            warning: '⚠️'\n        };\n        \n        const cores = {\n            success: '#28a745',\n            error: '#dc3545',\n            info: '#17a2b8',\n            warning: '#ffc107'\n        };\n        \n        const icone = icones[tipo] || icones.success;\n        const cor = cores[tipo] || cores.success;\n        \n        const notificacao = $(`\n            <div class=\"notificacao-popup\" style=\"\n                position: fixed;\n                top: 20px;\n                right: 20px;\n                background: ${cor};\n                color: white;\n                padding: 15px 20px;\n                border-radius: 10px;\n                box-shadow: 0 5px 15px rgba(0,0,0,0.3);\n                z-index: 9999;\n                max-width: 300px;\n                transform: translateX(100%);\n                transition: all 0.3s ease;\n            \">\n                <div style=\"display: flex; align-items: center; gap: 10px;\">\n                    <span style=\"font-size: 20px;\">${icone}</span>\n                    <div>\n                        <div style=\"font-weight: bold; margin-bottom: 5px;\">${titulo}</div>\n                        <div style=\"font-size: 14px; opacity: 0.9;\">${mensagem}</div>\n                    </div>\n                </div>\n            </div>\n        `);\n        \n        $('body').append(notificacao);\n        \n        setTimeout(() => notificacao.css('transform', 'translateX(0)'), 100);\n        setTimeout(() => {\n            notificacao.css('transform', 'translateX(100%)');\n            setTimeout(() => notificacao.remove(), 300);\n        }, 4000);\n    }\n}\n\n// Inicializar o gerenciador do carrinho quando o documento estiver pronto\n$(document).ready(function() {\n    window.carrinhoManager = new CarrinhoManager();\n});"